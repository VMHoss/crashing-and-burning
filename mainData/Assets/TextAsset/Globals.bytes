// NOTE1: values are seperate by a tab (or space, but keep it consistent, can also use multiple tabs or spaces for outlining), so: <VariableName> <TAB> <Value>
// NOTE2: Case sensitive: write true (preferred) or True for a boolean value, not TRUE or TrUe or TruE, same for false
// NOTE3: Programmer note: when adding a new variable also add it in Data.cs in the globals section with copy functions (see CopyFromGlobalsToData and CopyFromDataToGlobals) ... not ideal, but I don't have a better idea right now...

//----------------------------------------------------------------------
// Scene: Menu or Level  (Note this is not the same as the Unity Scenes! The scenes only apply in the Unity Game scene)
//----------------------------------------------------------------------
Scene	Menu  // Either Menu or Level (case sensitive!)  Doesn't matter for BRS
Level	1      // This is only relevant if the Scene is set to Level (then you immediately start in Level x)

// Saving data
VersionNumber	v1.0   // Should be increased at every release (stored in UserData and if this number and VersionNumber in UserData differ, UserData is reset, the last number is used internally, the first number for every release (Alpha/Beta/Release1/2/etc) to the outside world (for example to Spil))
LoadUserData	true   // Whether user data should be loaded, this will the above defined properties (such as unlocked cars)

// In the save list are the properties that are saved
SaveList	[VersionNumber, SFX, Music, HighDetails, PlayerCar, SuperPower, Gadget, Cash, PlayerLevel, XPWithinLevel, CurrentSafeHouse, MedalProgression, ObtainedNuclearDetonators, ObtainedHiddenPackages, ObtainedCashStashes, ObtainedSuperSpecialTrophies, UnlockedVehicles, UnlockedSuperPowers, UnlockedGadgets, UnlockedUpgrades, BoughtVehicles, BoughtSuperPowers, BoughtGadgets, UpgradedLevels, NewItemList, MainMissionNum, SwitchControls, BoughtAnythingWithMoney, NumPlays]  // VersionNumber must be in here so we can compare the version of the save data with the current version and if it differs then the save data is reset

//----------------------------------------------------------------------
// Audio
//----------------------------------------------------------------------
SFX		true
Music	true

//----------------------------------------------------------------------
// Visuals
//----------------------------------------------------------------------
HighDetails			false  // when false: no anti aliasing
FullScreenWidth		1280   // resolution width to be used in full screen
FullScreenHeight	720    // resolution height to be used in full screen
TargetFrameRate		-1     // -1 makes standalone games render as fast as they can, and web player games to render at 50-60 frames/second depending on the platform. 

//----------------------------------------------------------------------
// Misc
//----------------------------------------------------------------------
ClickLinks	true         // Spil wants two (release) versions: one where links are clickable and another where they're not clickable
Branding	Xform        // can be Xform, Miniclip, A10, ClickJogos, KaiserGamesEnglish, KaiserGamesGerman, KaiserGamesTurkish, Shockwave3D (when set to this we actually set it to Xform in code, only for sitelock)
Platform	Android      // can be: PC, iOS, Android

//----------------------------------------------------------------------
// About cheats/debug
//----------------------------------------------------------------------
Debug	false
Cheats	false

// TEMP? Load from asset bundles or from resources in project (will be used in online deployment)
UseAssetBundles	false

//----------------------------------------------------------------------
// Game specific variables
//----------------------------------------------------------------------
GameState			Menu		// Can be Menu, Shop or Game
PlayerCar			Lotus		// Choose your car, can be: A7, Chevrolet, FireTruck, Juggernaut, Lotus, PanzerTruck, MOBILE: Drill, KillRod, SchoolBus, Fennek, Tank, Taurus, AstonMartin, FordGT, Vice
SuperPower			None		// Super power can be: StuntMan, Golden, Diablo, QuadDamage, Toxic, maybe 'None' too?
Gadget				Boost		// Gadget can be: Boost, CarBomb, Jump, Magnet, PulseBurst, Shield
Cash				0			// Cash to start with
PlayerLevel			1			// The player level               -- When LoadUserData is true these are automatically computed from the missions that have been completed as specified in CurrentMissions
XPWithinLevel		0			// Obtained XP within this level  -- Idem
CurrentSafeHouse	1			// Number of the current activated safe house (StartPosition)
ObtainedNuclearDetonators	[]	// List of integers representing which nuclear detonators you've used
ObtainedHiddenPackages		[]	// List of integers in the range of ... well whatever Joep added as suffix number to the hiddenpackages
ObtainedCashStashes			[]  // List of integers representing which cash stashes you've collected
ObtainedSuperSpecialTrophies	[]  // List of integers representing which super special trophies you've collected, supposedly only 1 of this in the game, but we know better ;)

// Unlocks:
UnlockedVehicles	[Lotus, A7]		// [Lotus, A7, Chevrolet, FireTruck, Juggernaut, PanzerTruck, Drill, KillRod, SchoolBus, Fennek, Tank, Taurus, AstonMartin, FordGT, Vice]
UnlockedSuperPowers	[]						// [StuntMan, Golden, Diablo, QuadDamage, Toxic]
UnlockedGadgets		[Boost, CarBomb, Jump, Magnet, PulseBurst, Shield]					// [Boost, CarBomb, Jump, Magnet, PulseBurst, Shield]
UnlockedUpgrades	[AfterTouchLength, AirTimeControl, ArmorStrength, BoostStrength, CarBombStrength, Handling, MagnetStrength, PulseBurstStrength, Speed]
// [AfterTouchLength, AirTimeControl, ArmorStrength, BoostStrength, CarBombStrength, Handling, MagnetStrength, PulseBurstStrength, Speed]

// Bought stuff:
BoughtVehicles		[Lotus, A7]				// [Lotus, A7, Chevrolet, FireTruck, Juggernaut, PanzerTruck, Drill, KillRod, SchoolBus, Fennek, Tank, Taurus, AstonMartin, FordGT, Vice]
BoughtSuperPowers	[]						// [StuntMan, Golden, Diablo, QuadDamage, Toxic]
BoughtGadgets		[Boost, CarBomb]					// [Boost, CarBomb, Jump, Magnet, PulseBurst, Shield]
UpgradedLevels		[#AfterTouchLength: 0, #AirTimeControl: 0, #ArmorStrength: 0, #BoostStrength: 0, #CarBombStrength: 0, #Handling: 0, #MagnetStrength: 0, #PulseBurstStrength: 0, #Speed: 0]

NewItemList			[]  // This list will be filled with new items as they are unlocked and removed from the list as soon as they've been bought for the first time
						// List will contain: vehicles, pimps, gadgets and upgrades  (so not traffic or triggers as they can't be bought)

// Missions
MainMissionNum		1

MedalProgression	[#Medal1: 0, #Medal2: 0, #Medal3: 0, #Medal4: 0, #Medal5: 0, #Medal6: 0, #Medal7: 0, #Medal8: 0, #Medal9: 0, #Medal10: 0]  // keep track of medals, make sure initial value is correct

// Copied these from Rhino Rush Stampede, probably going to need them here as well
SwitchControls				false  // added this for saving if controls (touch controls, shown at the start of a run) were switched
BoughtAnythingWithMoney		false  // To store (just locally) whether this user bought anything with real money, if so: don't show anymore ads
NumPlays					0      // how many times we've played, used to not show ads during the first run (gives the player a 'clean' experience)

EnableMiniMapOnMobile	false  // for PC it will always be on, but on mobile this variable controls whether it is on (true) or off (false)

////////
// Keeping this for CMM3, as it is a convenient way to save all kinds of data, although requires some care in using it (be careful with references in code (see Trickalized for usage) but we may not even used it for CMM3, we'll see)
// Challenge progression
// The way this works: challenge data that is not in here is set with default data. Data that is in here overrides the default data
// When X is used as value, the value won't be used, but it's only important that the property exists
// PlayerChallengeData	[#Challenge1Unlocked: X]  // Contains properties where Y is a challenge number: ChallengeYUnlocked, ChallengeYPlayerTime, ChallengeYCompletedMainChallenge, ChallengeYCompletedSubChallenge1, ChallengeYCompletedSubChallenge2
// Player progression is not saved as a variable. It is automatically obtained from the challenge progression and medal progression (so that there can be no inconsistency)
